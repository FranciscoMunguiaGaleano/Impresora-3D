D G "__PCM__" 0 155 ""5.015""
D G "__DEVICE__" 0 155 "1454"
D G "__DATE__" 0 155 ""25-jul.-17""
D G "__TIME__" 0 155 ""17:11:49"" "Standard Header file for the PIC16F1454 device ////////////////"
c L "set_tris_a" 1 3 6 "FUNCTION"
v L "value" 1 40 "int8" `54 
f B "set_tris_a" 1 40 "void(int8 value)" `53 
v L "value" 1 41 "int8" `56 
f B "set_tris_c" 1 41 "void(int8 value)" `55 
f B "get_tris_a" 1 42 "int8()" `57 
f B "get_tris_c" 1 43 "int8()" `58 
v L "value" 1 44 "int8" `60 
f B "output_a" 1 44 "void(int8 value)" `59 
v L "value" 1 45 "int8" `62 
f B "output_c" 1 45 "void(int8 value)" `61 
f B "input_a" 1 46 "int8()" `63 
f B "input_c" 1 47 "int8()" `64 
f B "input_change_a" 1 48 "int8()" `65 
f B "input_change_c" 1 49 "int8()" `66 
v L "pin" 1 50 "int16" `68 
f B "input" 1 50 "int8(int16 pin)" `67 
v L "pin" 1 51 "int16" `70 
f B "input_state" 1 51 "int8(int16 pin)" `69 
v L "pin" 1 52 "int16" `72 
f B "output_low" 1 52 "void(int16 pin)" `71 
v L "pin" 1 53 "int16" `74 
f B "output_high" 1 53 "void(int16 pin)" `73 
v L "pin" 1 54 "int16" `76 
f B "output_toggle" 1 54 "void(int16 pin)" `75 
v L "pin" 1 55 "int16" `78 
v L "level" 1 55 "int8" `79 
f B "output_bit" 1 55 "void(int16 pin,int8 level)" `77 
v L "pin" 1 56 "int16" `81 
f B "output_float" 1 56 "void(int16 pin)" `80 
v L "pin" 1 57 "int16" `83 
f B "output_drive" 1 57 "void(int16 pin)" `82  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 61 "96"
d G "PIN_A1" 1 62 "97"
d G "PIN_A3" 1 63 "99"
d G "PIN_A4" 1 64 "100"
d G "PIN_A5" 1 65 "101"
d G "PIN_C0" 1 67 "112"
d G "PIN_C1" 1 68 "113"
d G "PIN_C2" 1 69 "114"
d G "PIN_C3" 1 70 "115"
d G "PIN_C4" 1 71 "116"
d G "PIN_C5" 1 72 "117"
d G "FALSE" 1 75 "0"
d G "TRUE" 1 76 "1"
d G "BYTE" 1 78 "int8"
d G "BOOLEAN" 1 79 "int1"
d G "getc" 1 81 "getch"
d G "fgetc" 1 82 "getch"
d G "getchar" 1 83 "getch"
d G "putc" 1 84 "putchar"
d G "fputc" 1 85 "putchar"
d G "fgets" 1 86 "gets"
d G "fputs" 1 87 "puts"
c L "output_drive" 1 3 3 "FUNCTION"
f B "restart_cause" 1 92 "int8()" `84 
f B "reset_cpu" 1 93 "void()" `85 
f B "sleep" 1 94 "void()" `86  "Constants returned from RESTART_CAUSE() are:"
d G "NORMAL_POWER_UP" 1 96 "0x3C"
d G "BROWNOUT_RESTART" 1 97 "0x3E"
d G "MCLR_FROM_SLEEP" 1 98 "0x27"
d G "WDT_TIMEOUT" 1 99 "0x1F"
d G "WDT_FROM_SLEEP" 1 100 "0x0F"
d G "INTERRUPT_FROM_SLEEP" 1 101 "0x2F"
d G "MCLR_FROM_RUN" 1 102 "0x37"
d G "RESET_INSTRUCTION" 1 103 "0x3B"
d G "STACK_OVERFLOW" 1 104 "0xBF"
d G "STACK_UNDERFLOW" 1 105 "0x7F"
c L "sleep" 1 3 5 "FUNCTION"
v L "mode" 1 112 "int8" `88 
f B "setup_timer_0" 1 112 "void(int8 mode)" `87 
v L "value" 1 113 "int8" `90 
f B "set_timer0" 1 113 "void(int8 value)" `89 
f B "get_timer0" 1 114 "int8()" `91 
v L "mode" 1 115 "int8" `93 
v L "prescaler" 1 115 "int8" `94 
f B "setup_counters" 1 115 "void(int8 mode,int8 prescaler)" `92 
v L "value" 1 116 "int8" `96 
f B "set_rtcc" 1 116 "void(int8 value)" `95 
f B "get_rtcc" 1 117 "int8()" `97  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 119 "0"
d G "T0_EXT_L_TO_H" 1 120 "32"
d G "T0_EXT_H_TO_L" 1 121 "48"
d G "T0_DIV_1" 1 123 "8"
d G "T0_DIV_2" 1 124 "0"
d G "T0_DIV_4" 1 125 "1"
d G "T0_DIV_8" 1 126 "2"
d G "T0_DIV_16" 1 127 "3"
d G "T0_DIV_32" 1 128 "4"
d G "T0_DIV_64" 1 129 "5"
d G "T0_DIV_128" 1 130 "6"
d G "T0_DIV_256" 1 131 "7"
d G "T0_8_BIT" 1 134 "0"
d G "RTCC_INTERNAL" 1 136 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 1 137 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 1 138 "48"
d G "RTCC_DIV_1" 1 139 "8"
d G "RTCC_DIV_2" 1 140 "0"
d G "RTCC_DIV_4" 1 141 "1"
d G "RTCC_DIV_8" 1 142 "2"
d G "RTCC_DIV_16" 1 143 "3"
d G "RTCC_DIV_32" 1 144 "4"
d G "RTCC_DIV_64" 1 145 "5"
d G "RTCC_DIV_128" 1 146 "6"
d G "RTCC_DIV_256" 1 147 "7"
d G "RTCC_8_BIT" 1 148 "0"
c L "get_rtcc" 1 3 7 "FUNCTION"
v L "mode" 1 158 "int16" `99 
f B "setup_wdt" 1 158 "void(int16 mode)" `98 
f B "restart_wdt" 1 159 "void()" `100  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 1 161 "0x1000"
d G "WDT_OFF" 1 162 "0x2000"
d G "WDT_1MS" 1 164 "0x100"
d G "WDT_2MS" 1 165 "0x101"
d G "WDT_4MS" 1 166 "0x102"
d G "WDT_8MS" 1 167 "0x103"
d G "WDT_16MS" 1 168 "0x104"
d G "WDT_32MS" 1 169 "0x105"
d G "WDT_64MS" 1 170 "0x106"
d G "WDT_128MS" 1 171 "0x107"
d G "WDT_256MS" 1 172 "0x108"
d G "WDT_512MS" 1 173 "0x109"
d G "WDT_1S" 1 174 "0x10A"
d G "WDT_2S" 1 175 "0x10B"
d G "WDT_4S" 1 176 "0x10C"
d G "WDT_8S" 1 177 "0x10D"
d G "WDT_16S" 1 178 "0x10E"
d G "WDT_32S" 1 179 "0x10F"
d G "WDT_64S" 1 180 "0x110"
d G "WDT_128S" 1 181 "0x111"
d G "WDT_256S" 1 182 "0x112"
c L "restart_wdt" 1 3 3 "FUNCTION"
v L "mode" 1 187 "int16" `102 
f B "setup_timer_1" 1 187 "void(int16 mode)" `101 
f B "get_timer1" 1 188 "int16()" `103 
v L "value" 1 189 "int16" `105 
f B "set_timer1" 1 189 "void(int16 value)" `104  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 192 "0"
d G "T1_CAPSENSE" 1 193 "0xC5"
d G "T1_EXTERNAL" 1 194 "0x85"
d G "T1_EXTERNAL_SYNC" 1 195 "0x81"
d G "T1_FOSC" 1 196 "0x45"
d G "T1_INTERNAL" 1 197 "0x05"
d G "T1_ENABLE_T1OSC" 1 199 "0x08"
d G "T1_DIV_BY_1" 1 201 "0x00"
d G "T1_DIV_BY_2" 1 202 "0x10"
d G "T1_DIV_BY_4" 1 203 "0x20"
d G "T1_DIV_BY_8" 1 204 "0x30"
d G "T1_GATE" 1 206 "0x8000"
d G "T1_GATE_INVERTED" 1 207 "0xC000"
d G "T1_GATE_TOGGLE" 1 208 "0xA000"
d G "T1_GATE_SINGLE" 1 209 "0x9000"
d G "T1_GATE_TIMER0" 1 210 "0x8100"
d G "T1_GATE_COMP1" 1 211 "0x8200"
d G "T1_GATE_COMP2" 1 212 "0x8300"
d G "T1_GATE_A4" 1 214 "0"
d G "T1_GATE_A3" 1 215 "0x10000"
c L "set_timer1" 1 3 3 "FUNCTION"
v L "mode" 1 220 "int8" `107 
v L "period" 1 220 "int8" `108 
v L "postscale" 1 220 "int8" `109 
f B "setup_timer_2" 1 220 "void(int8 mode,int8 period,int8 postscale)" `106 
f B "get_timer2" 1 221 "int8()" `110 
v L "value" 1 222 "int8" `112 
f B "set_timer2" 1 222 "void(int8 value)" `111  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 224 "0"
d G "T2_DIV_BY_1" 1 225 "4"
d G "T2_DIV_BY_4" 1 226 "5"
d G "T2_DIV_BY_16" 1 227 "6"
d G "T2_DIV_BY_64" 1 228 "7"
c L "set_timer2" 1 3 3 "FUNCTION"
v L "mode" 1 233 "int32" `114 
f B "setup_spi" 1 233 "void(int32 mode)" `113 
v L "value" 1 234 "int8" `116 
f B "spi_write" 1 234 "void(int8 value)" `115 
f B "spi_read" 1 235 "int8()" `117 
v L "value" 1 236 "int8" `119 
f G "spi_read" 1 236 "int8(int8 value)" `118 
f B "spi_data_in" 1 237 "int8()" `120  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 1 239 "0x00"
d G "SPI_MASTER" 1 240 "0x20"
d G "SPI_SLAVE" 1 241 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 242 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 243 "0x00"
d G "SPI_CLK_DIV_4" 1 244 "0x00"
d G "SPI_CLK_DIV_16" 1 245 "0x01"
d G "SPI_CLK_DIV_64" 1 246 "0x02"
d G "SPI_CLK_T2" 1 247 "0x03"
d G "SPI_SS_DISABLED" 1 248 "0x01"
d G "SPI_SS_C3" 1 250 "0x00000"
d G "SPI_SS_A3" 1 251 "0x10000"
d G "SPI_DO_C2" 1 252 "0x00000"
d G "SPI_DO_A4" 1 253 "0x20000"
d G "SPI_XMIT_L_TO_H" 1 255 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 256 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 258 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 259 "0x8000"
d G "SPI_L_TO_H" 1 262 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 263 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in" 1 3 2 "FUNCTION"
v L "baud" 1 267 "int32" `122 
f B "setup_uart" 1 267 "void(int32 baud)" `121 
v L "baud" 1 268 "int32" `124 
v L "stream" 1 268 "int8" `125 
f G "setup_uart" 1 268 "void(int32 baud,int8 stream)" `123 
v L "baud" 1 269 "int32" `127 
v L "stream" 1 269 "int8" `128 
v L "clock" 1 269 "int32" `129 
f G "setup_uart" 1 269 "void(int32 baud,int8 stream,int32 clock)" `126 
v L "baud" 1 270 "int32" `131 
f B "set_uart_speed" 1 270 "void(int32 baud)" `130 
v L "baud" 1 271 "int32" `133 
v L "stream" 1 271 "int8" `134 
f G "set_uart_speed" 1 271 "void(int32 baud,int8 stream)" `132 
v L "baud" 1 272 "int32" `136 
v L "stream" 1 272 "int8" `137 
v L "clock" 1 272 "int32" `138 
f G "set_uart_speed" 1 272 "void(int32 baud,int8 stream,int32 clock)" `135  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 276 "2"
d G "UART_DATA" 1 277 "4"
d G "UART_AUTODETECT" 1 278 "8"
d G "UART_AUTODETECT_NOWAIT" 1 279 "9"
d G "UART_WAKEUP_ON_RDA" 1 280 "10"
d G "UART_SEND_BREAK" 1 281 "13"
c L "set_uart_speed" 1 3 2 "FUNCTION"
v L "mode" 1 285 "int8" `140 
f B "setup_oscillator" 1 285 "int8(int8 mode)" `139 
v L "mode" 1 286 "int8" `142 
v L "tune" 1 286 "sint8" `143 
f G "setup_oscillator" 1 286 "int8(int8 mode,sint8 tune)" `141 
v L "mode" 1 287 "int8" `145 
f B "setup_act" 1 287 "void(int8 mode)" `144 
f G "setup_act" 1 288 "int8()" `146 
v L "mode" 1 289 "int8" `148 
f G "setup_act" 1 289 "int8(int8 mode)" `147 
f B "act_status" 1 290 "int8()" `149  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 1 293 "0"
d G "OSC_31250" 1 294 "0x08"
d G "OSC_62500" 1 295 "0x10"
d G "OSC_125KHZ" 1 296 "0x20"
d G "OSC_250KHZ" 1 297 "0x24"
d G "OSC_500KHZ" 1 298 "0x28"
d G "OSC_1MHZ" 1 299 "0x2C"
d G "OSC_2MHZ" 1 300 "0x30"
d G "OSC_4MHZ" 1 301 "0x34"
d G "OSC_8MHZ" 1 302 "0x38"
d G "OSC_16MHZ" 1 303 "0x3C"
d G "OSC_SOSC" 1 305 "1"
d G "OSC_INTRC" 1 306 "2"
d G "OSC_NORMAL" 1 307 "0"
d G "OSC_PLL_3X" 1 309 "0x40"
d G "OSC_PLL_4X" 1 310 "0x00"
d G "OSC_PLL_ON" 1 311 "0x80"
d G "OSC_PLL_OFF" 1 312 "0x00"
d G "OSC_HFINTRC_STABLE" 1 316 "0x01"
d G "OSC_LFINTRC_READY" 1 317 "0x02"
d G "OSC_HFINTRC_READY" 1 318 "0x10"
d G "OSC_RUNNING_FROM_FUSES" 1 319 "0x20" "Device is running from the clock defined by FOSC<2:0> of the CONFIG1 register"
d G "OSC_PLL_READY" 1 320 "0x40"
d G "OSC_SOSC_READY" 1 321 "0x80"
d G "ACT_DISABLED" 1 324 "0"
d G "ACT_ENABLED" 1 325 "0x80"
d G "ACT_TUNED_TO_SOSC" 1 326 "0"
d G "ACT_TUNED_TO_USB" 1 327 "0x10"
d G "ACT_CLOCK_LOCKED" 1 329 "0x08" "16 MHz internal oscillator is within ± 0.20%"
d G "ACT_OUT_OF_RANGE" 1 330 "0x02" "oscillator frequency is outside of the OSCTUNE range"
c L "act_status" 1 3 3 "FUNCTION"
v L "mode" 1 335 "int8" `151 
f B "setup_pwm1" 1 335 "void(int8 mode)" `150 
v L "value" 1 336 "int16" `153 
f B "set_pwm1_duty" 1 336 "void(int16 value)" `152 
v L "mode" 1 337 "int8" `155 
f B "setup_pwm2" 1 337 "void(int8 mode)" `154 
v L "value" 1 338 "int16" `157 
f B "set_pwm2_duty" 1 338 "void(int16 value)" `156 
v L "mode" 1 339 "int8" `159 
f B "setup_pwm3" 1 339 "void(int8 mode)" `158 
v L "value" 1 340 "int16" `161 
f B "set_pwm3_duty" 1 340 "void(int16 value)" `160 
v L "mode" 1 341 "int8" `163 
f B "setup_pwm4" 1 341 "void(int8 mode)" `162 
v L "value" 1 342 "int16" `165 
f B "set_pwm4_duty" 1 342 "void(int16 value)" `164  "Constants used for SETUP_PWMx() are:"
d G "PWM_ENABLED" 1 344 "0x80"
d G "PWM_DISABLED" 1 345 "0"
d G "PWM_OUTPUT" 1 346 "0x40"
d G "PWM_ACTIVE_LOW" 1 347 "0x10"
d G "PWM_ACTIVE_HIGH" 1 348 "0"
d G "PWM2_C3" 1 350 "0"
d G "PWM2_A5" 1 351 "0x100"
c L "set_pwm4_duty" 1 3 3 "FUNCTION"
v L "x" 1 360 "sint8" `169 
f B "abs" 1 360 "sint8(sint8 x)" `168 
v L "x" 1 361 "sint16" `171 
f G "abs" 1 361 "sint16(sint16 x)" `170 
v L "x" 1 362 "sint32" `173 
f G "abs" 1 362 "sint32(sint32 x)" `172 
v L "x" 1 363 "float" `175 
f G "abs" 1 363 "float(float x)" `174 
v L "??65535" 1 364 "int8" `177 
v L "??65535" 1 364 "int8" `178 
f B "_mul" 1 364 "int16(int8 ,int8 )" `176 
v L "??65535" 1 365 "sint8" `177 
v L "??65535" 1 365 "sint8" `181 
f G "_mul" 1 365 "sint16(sint8 ,sint8 )" `179 
v L "??65535" 1 366 "int16" `177 
v L "??65535" 1 366 "int16" `184 
f G "_mul" 1 366 "int32(int16 ,int16 )" `182 
v L "??65535" 1 367 "sint16" `177 
v L "??65535" 1 367 "sint16" `187 
f G "_mul" 1 367 "sint32(sint16 ,sint16 )" `185  "Memory Manipulation Prototypes:"
v L "bank" 1 370 "int8" `189 
v L "offset" 1 370 "int8" `190 
f B "read_bank" 1 370 "int8(int8 bank,int8 offset)" `188 
v L "bank" 1 371 "int8" `192 
v L "offset" 1 371 "int8" `193 
v L "value" 1 371 "int8" `194 
f B "write_bank" 1 371 "void(int8 bank,int8 offset,int8 value)" `191 
v L "dest" 1 372 "*int8" `196 
v L "src" 1 372 "*int8" `197 
f B "strcpy" 1 372 "void(*int8 dest,*int8 src)" `195 
v L "dest" 1 373 "*int8" `199 
v L "src" 1 373 "*int8" `200 
f B "strcopy" 1 373 "void(*int8 dest,*int8 src)" `198 
v L "destination" 1 374 "*int8" `202 
v L "value" 1 374 "int8" `203 
v L "num" 1 374 "int16" `204 
f B "memset" 1 374 "void(*int8 destination,int8 value,int16 num)" `201 
v L "destination" 1 375 "*int8" `206 
v L "source" 1 375 "*int8" `207 
v L "num" 1 375 "int16" `208 
f B "memcpy" 1 375 "void(*int8 destination,*int8 source,int16 num)" `205  "String Prototypes:"
v L "cvalue" 1 378 "int8" `210 
f B "toupper" 1 378 "int8(int8 cvalue)" `209 
v L "cvalue" 1 379 "int8" `212 
f B "tolower" 1 379 "int8(int8 cvalue)" `211 
v L "string" 1 380 "*int8" `214 
v L "cstring" 1 380 "*int8" `215 
f B "sprintf" 1 380 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `213  "Data Manipulators Prototypes:"
v L "address" 1 383 "*int8" `218 
v L "bytes" 1 383 "int8" `219 
v L "value" 1 383 "int8" `220 
f B "shift_left" 1 383 "int8(*int8 address,int8 bytes,int8 value)" `217 
v L "address" 1 384 "*int8" `222 
v L "bytes" 1 384 "int8" `223 
v L "value" 1 384 "int8" `224 
f B "shift_right" 1 384 "int8(*int8 address,int8 bytes,int8 value)" `221 
v L "address" 1 385 "*int8" `226 
v L "bytes" 1 385 "int8" `227 
f B "rotate_left" 1 385 "void(*int8 address,int8 bytes)" `225 
v L "address" 1 386 "*int8" `229 
v L "bytes" 1 386 "int8" `230 
f B "rotate_right" 1 386 "void(*int8 address,int8 bytes)" `228 
v L "value" 1 387 "int8" `232 
f B "swap" 1 387 "void(int8 value)" `231 
v L "var" 1 388 "int16" `234 
v L "offset" 1 388 "int8" `235 
f B "make8" 1 388 "int8(int16 var,int8 offset)" `233 
v L "var" 1 389 "int32" `234 
v L "offset" 1 389 "int8" `238 
f G "make8" 1 389 "int8(int32 var,int8 offset)" `236 
v L "varhigh" 1 390 "int8" `240 
v L "varlow" 1 390 "int8" `241 
f B "make16" 1 390 "int16(int8 varhigh,int8 varlow)" `239 
v L "var1" 1 391 "int16" `243 
f B "make32" 1 391 "int32(int16 var1)" `242 
v L "var1" 1 392 "int16" `245 
v L "var2" 1 392 "int16" `246 
f G "make32" 1 392 "int32(int16 var1,int16 var2)" `244 
v L "var1" 1 393 "int16" `245 
v L "var2" 1 393 "int8" `249 
f G "make32" 1 393 "int32(int16 var1,int8 var2)" `247 
v L "var1" 1 394 "int16" `251 
v L "var2" 1 394 "int8" `252 
v L "var3" 1 394 "int8" `253 
f G "make32" 1 394 "int32(int16 var1,int8 var2,int8 var3)" `250 
v L "var1" 1 395 "int8" `255 
f G "make32" 1 395 "int32(int8 var1)" `254 
v L "var1" 1 396 "int8" `245 
v L "var2" 1 396 "int8" `258 
f G "make32" 1 396 "int32(int8 var1,int8 var2)" `256 
v L "var1" 1 397 "int8" `251 
v L "var2" 1 397 "int8" `252 
v L "var3" 1 397 "int8" `262 
f G "make32" 1 397 "int32(int8 var1,int8 var2,int8 var3)" `259 
v L "var1" 1 398 "int8" `264 
v L "var2" 1 398 "int8" `265 
v L "var3" 1 398 "int8" `266 
v L "var4" 1 398 "int8" `267 
f G "make32" 1 398 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `263 
v L "var1" 1 399 "int8" `245 
v L "var2" 1 399 "int16" `270 
f G "make32" 1 399 "int32(int8 var1,int16 var2)" `268 
v L "var1" 1 400 "int8" `251 
v L "var2" 1 400 "int16" `252 
v L "var3" 1 400 "int8" `274 
f G "make32" 1 400 "int32(int8 var1,int16 var2,int8 var3)" `271 
v L "var1" 1 401 "int8" `251 
v L "var2" 1 401 "int8" `252 
v L "var3" 1 401 "int16" `278 
f G "make32" 1 401 "int32(int8 var1,int8 var2,int16 var3)" `275 
v L "var" 1 402 "int8" `280 
v L "bit" 1 402 "int8" `281 
f B "bit_set" 1 402 "void(int8 var,int8 bit)" `279 
v L "var" 1 403 "int16" `280 
v L "bit" 1 403 "int8" `284 
f G "bit_set" 1 403 "void(int16 var,int8 bit)" `282 
v L "var" 1 404 "int32" `280 
v L "bit" 1 404 "int8" `287 
f G "bit_set" 1 404 "void(int32 var,int8 bit)" `285 
v L "var" 1 405 "int8" `289 
v L "bit" 1 405 "int8" `290 
f B "bit_clear" 1 405 "void(int8 var,int8 bit)" `288 
v L "var" 1 406 "int16" `289 
v L "bit" 1 406 "int8" `293 
f G "bit_clear" 1 406 "void(int16 var,int8 bit)" `291 
v L "var" 1 407 "int32" `289 
v L "bit" 1 407 "int8" `296 
f G "bit_clear" 1 407 "void(int32 var,int8 bit)" `294 
v L "var" 1 408 "int8" `298 
v L "bit" 1 408 "int8" `299 
f B "bit_test" 1 408 "int8(int8 var,int8 bit)" `297 
v L "var" 1 409 "int16" `298 
v L "bit" 1 409 "int8" `302 
f G "bit_test" 1 409 "int8(int16 var,int8 bit)" `300 
v L "var" 1 410 "int32" `298 
v L "bit" 1 410 "int8" `305 
f G "bit_test" 1 410 "int8(int32 var,int8 bit)" `303  "#use delay() Prototypes:"
v L "count" 1 413 "int8" `307 
f B "delay_cycles" 1 413 "void(int8 count)" `306 
v L "time" 1 414 "int16" `309 
f B "delay_ms" 1 414 "void(int16 time)" `308 
v L "time" 1 415 "int16" `311 
f B "delay_us" 1 415 "void(int16 time)" `310  "#use rs232() Prototypes:"
v L "cdata" 1 418 "int8" `313 
f B "putchar" 1 418 "void(int8 cdata)" `312 
v L "cdata" 1 419 "int8" `315 
v L "stream" 1 419 "int8" `316 
f G "putchar" 1 419 "void(int8 cdata,int8 stream)" `314 
v L "string" 1 420 "*int8" `318 
f B "puts" 1 420 "void(*int8 string)" `317 
v L "string" 1 421 "*int8" `320 
v L "stream" 1 421 "int8" `321 
f G "puts" 1 421 "void(*int8 string,int8 stream)" `319 
f B "getch" 1 422 "int8()" `322 
v L "stream" 1 423 "int8" `324 
f G "getch" 1 423 "int8(int8 stream)" `323 
v L "string" 1 424 "*int8" `326 
f B "gets" 1 424 "void(*int8 string)" `325 
v L "string" 1 425 "*int8" `328 
v L "stream" 1 425 "int8" `329 
f G "gets" 1 425 "void(*int8 string,int8 stream)" `327 
f B "kbhit" 1 426 "int8()" `330 
v L "stream" 1 427 "int8" `332 
f G "kbhit" 1 427 "int8(int8 stream)" `331 
v L "string" 1 428 "*int8" `334 
f B "printf" 1 428 "void(*int8 string,*int8 _VA_LIST)" `333 
v L "stream" 1 429 "int8" `337 
v L "string" 1 429 "*int8" `338 
f B "fprintf" 1 429 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `336 
f B "putc_send" 1 430 "void()" `340 
v L "stream" 1 431 "int8" `342 
f B "fputc_send" 1 431 "void(int8 stream)" `341 
f B "rcv_buffer_full" 1 432 "int8()" `343 
v L "stream" 1 433 "int8" `345 
f G "rcv_buffer_full" 1 433 "int8(int8 stream)" `344 
f B "rcv_buffer_bytes" 1 434 "int16()" `346 
v L "stream" 1 435 "int8" `348 
f G "rcv_buffer_bytes" 1 435 "int16(int8 stream)" `347 
f B "tx_buffer_full" 1 436 "int8()" `349 
v L "stream" 1 437 "int8" `351 
f G "tx_buffer_full" 1 437 "int8(int8 stream)" `350 
f B "tx_buffer_bytes" 1 438 "int16()" `352 
v L "stream" 1 439 "int8" `354 
f G "tx_buffer_bytes" 1 439 "int16(int8 stream)" `353  "#use i2c() Prototypes:"
f B "i2c_read" 1 442 "int8()" `355 
v L "stream" 1 443 "int8" `357 
f G "i2c_read" 1 443 "int8(int8 stream)" `356 
v L "stream" 1 444 "int8" `359 
v L "ack" 1 444 "int8" `360 
f G "i2c_read" 1 444 "int8(int8 stream,int8 ack)" `358 
v L "data" 1 445 "int8" `362 
f B "i2c_write" 1 445 "int8(int8 data)" `361 
v L "stream" 1 446 "int8" `364 
v L "data" 1 446 "int8" `365 
f G "i2c_write" 1 446 "int8(int8 stream,int8 data)" `363 
f B "i2c_start" 1 447 "void()" `366 
v L "stream" 1 448 "int8" `368 
f G "i2c_start" 1 448 "void(int8 stream)" `367 
v L "stream" 1 449 "int8" `370 
v L "restart" 1 449 "int8" `371 
f G "i2c_start" 1 449 "void(int8 stream,int8 restart)" `369 
f B "i2c_stop" 1 450 "void()" `372 
v L "stream" 1 451 "int8" `374 
f G "i2c_stop" 1 451 "void(int8 stream)" `373 
f B "i2c_isr_state" 1 452 "int8()" `375 
v L "addr" 1 453 "int8" `377 
f B "i2c_slaveaddr" 1 453 "void(int8 addr)" `376 
v L "stream" 1 454 "int8" `379 
v L "addr" 1 454 "int8" `380 
f G "i2c_slaveaddr" 1 454 "void(int8 stream,int8 addr)" `378 
f B "i2c_poll" 1 455 "int8()" `381 
v L "stream" 1 456 "int8" `383 
f G "i2c_poll" 1 456 "int8(int8 stream)" `382 
v L "baud" 1 457 "int32" `385 
f B "i2c_init" 1 457 "void(int32 baud)" `384 
v L "stream" 1 458 "int8" `387 
v L "baud" 1 458 "int32" `388 
f G "i2c_init" 1 458 "void(int8 stream,int32 baud)" `386  "#use spi() Prototypes:"
f B "spi_xfer" 1 461 "int8()" `389 
f G "spi_xfer" 1 462 "int16()" `390 
f G "spi_xfer" 1 463 "int32()" `391 
v L "data" 1 464 "int8" `393 
f G "spi_xfer" 1 464 "int8(int8 data)" `392 
v L "data" 1 465 "int16" `395 
f G "spi_xfer" 1 465 "int16(int16 data)" `394 
v L "data" 1 466 "int32" `397 
f G "spi_xfer" 1 466 "int32(int32 data)" `396 
v L "stream" 1 467 "int8" `399 
v L "data" 1 467 "int8" `400 
f G "spi_xfer" 1 467 "int8(int8 stream,int8 data)" `398 
v L "stream" 1 468 "int8" `399 
v L "data" 1 468 "int16" `403 
f G "spi_xfer" 1 468 "int16(int8 stream,int16 data)" `401 
v L "stream" 1 469 "int8" `399 
v L "data" 1 469 "int32" `406 
f G "spi_xfer" 1 469 "int32(int8 stream,int32 data)" `404 
v L "stream" 1 470 "int8" `408 
v L "data" 1 470 "int8" `409 
v L "bits" 1 470 "int8" `410 
f G "spi_xfer" 1 470 "int8(int8 stream,int8 data,int8 bits)" `407 
v L "stream" 1 471 "int8" `408 
v L "data" 1 471 "int16" `409 
v L "bits" 1 471 "int8" `414 
f G "spi_xfer" 1 471 "int16(int8 stream,int16 data,int8 bits)" `411 
v L "stream" 1 472 "int8" `408 
v L "data" 1 472 "int32" `409 
v L "bits" 1 472 "int8" `418 
f G "spi_xfer" 1 472 "int32(int8 stream,int32 data,int8 bits)" `415 
v L "baud" 1 473 "int32" `420 
f B "spi_init" 1 473 "void(int32 baud)" `419 
v L "stream" 1 474 "int8" `422 
v L "baud" 1 474 "int32" `423 
f G "spi_init" 1 474 "void(int8 stream,int32 baud)" `421 
v L "baud" 1 475 "int32" `425 
f B "spi_speed" 1 475 "void(int32 baud)" `424 
v L "stream" 1 476 "int8" `427 
v L "baud" 1 476 "int32" `428 
f G "spi_speed" 1 476 "void(int8 stream,int32 baud)" `426 
v L "stream" 1 477 "int8" `430 
v L "baud" 1 477 "int32" `431 
v L "clock" 1 477 "int32" `432 
f G "spi_speed" 1 477 "void(int8 stream,int32 baud,int32 clock)" `429 
v L "data" 1 478 "int8" `434 
f B "spi_prewrite" 1 478 "void(int8 data)" `433 
v L "data" 1 479 "int16" `436 
f G "spi_prewrite" 1 479 "void(int16 data)" `435 
v L "data" 1 480 "int32" `438 
f G "spi_prewrite" 1 480 "void(int32 data)" `437 
v L "??65535" 1 481 "int8" `440 
v L "data" 1 481 "int8" `441 
f G "spi_prewrite" 1 481 "void(int8 ,int8 data)" `439 
v L "??65535" 1 482 "int8" `440 
v L "data" 1 482 "int16" `444 
f G "spi_prewrite" 1 482 "void(int8 ,int16 data)" `442 
v L "??65535" 1 483 "int8" `440 
v L "data" 1 483 "int32" `447 
f G "spi_prewrite" 1 483 "void(int8 ,int32 data)" `445 
f B "spi_xfer_in" 1 484 "int8()" `448 
f G "spi_xfer_in" 1 485 "int16()" `449 
f G "spi_xfer_in" 1 486 "int32()" `450 
v L "bits" 1 487 "int8" `452 
f G "spi_xfer_in" 1 487 "int8(int8 bits)" `451 
v L "bits" 1 488 "int8" `454 
f G "spi_xfer_in" 1 488 "int16(int8 bits)" `453 
v L "bits" 1 489 "int8" `456 
f G "spi_xfer_in" 1 489 "int32(int8 bits)" `455 
v L "stream" 1 490 "int8" `458 
v L "bits" 1 490 "int8" `459 
f G "spi_xfer_in" 1 490 "int8(int8 stream,int8 bits)" `457 
v L "stream" 1 491 "int8" `458 
v L "bits" 1 491 "int8" `462 
f G "spi_xfer_in" 1 491 "int16(int8 stream,int8 bits)" `460 
v L "stream" 1 492 "int8" `458 
v L "bits" 1 492 "int8" `465 
f G "spi_xfer_in" 1 492 "int32(int8 stream,int8 bits)" `463  "#use rtos() Prototypes:"
f B "rtos_run" 1 495 "void()" `466 
f B "rtos_yield" 1 496 "void()" `467 
v L "task" 1 497 "int8" `469 
f B "rtos_enable" 1 497 "void(int8 task)" `468 
v L "task" 1 498 "int8" `471 
f B "rtos_disable" 1 498 "void(int8 task)" `470 
f B "rtos_terminate" 1 499 "void()" `472 
v L "flag" 1 500 "int8" `474 
f B "rtos_await" 1 500 "void(int8 flag)" `473 
v L "sem" 1 501 "int8" `476 
f B "rtos_wait" 1 501 "void(int8 sem)" `475 
v L "sem" 1 502 "int8" `478 
f B "rtos_signal" 1 502 "void(int8 sem)" `477 
v L "task" 1 503 "int8" `480 
v L "msg" 1 503 "int8" `481 
f B "rtos_msg_send" 1 503 "void(int8 task,int8 msg)" `479 
f B "rtos_msg_read" 1 504 "int8()" `482 
f B "rtos_msg_poll" 1 505 "int8()" `483 
v L "task" 1 506 "int8" `485 
f B "rtos_overrun" 1 506 "int8(int8 task)" `484 
v L "task" 1 507 "int8" `487 
v L "stat" 1 507 "*int8" `488 
f B "rtos_stats" 1 507 "void(int8 task,*int8 stat)" `486  "#use timer() Prototypes:"
f B "get_ticks" 1 510 "int8()" `489 
f G "get_ticks" 1 511 "int16()" `490 
f G "get_ticks" 1 512 "int32()" `491 
v L "stream" 1 513 "int8" `493 
f G "get_ticks" 1 513 "int8(int8 stream)" `492 
v L "stream" 1 514 "int8" `495 
f G "get_ticks" 1 514 "int16(int8 stream)" `494 
v L "stream" 1 515 "int8" `497 
f G "get_ticks" 1 515 "int32(int8 stream)" `496 
v L "value" 1 516 "int8" `499 
f B "set_ticks" 1 516 "void(int8 value)" `498 
v L "value" 1 517 "int16" `501 
f G "set_ticks" 1 517 "void(int16 value)" `500 
v L "value" 1 518 "int32" `503 
f G "set_ticks" 1 518 "void(int32 value)" `502 
v L "stream" 1 519 "int8" `505 
v L "value" 1 519 "int8" `506 
f G "set_ticks" 1 519 "void(int8 stream,int8 value)" `504 
v L "stream" 1 520 "int8" `505 
v L "value" 1 520 "int16" `509 
f G "set_ticks" 1 520 "void(int8 stream,int16 value)" `507 
v L "stream" 1 521 "int8" `505 
v L "value" 1 521 "int32" `512 
f G "set_ticks" 1 521 "void(int8 stream,int32 value)" `510  "#use pwm() Prototypes:"
f B "pwm_on" 1 524 "void()" `513 
v L "stream" 1 525 "int8" `515 
f G "pwm_on" 1 525 "void(int8 stream)" `514 
f B "pwm_off" 1 526 "void()" `516 
v L "stream" 1 527 "int8" `518 
f G "pwm_off" 1 527 "void(int8 stream)" `517 
v L "duty" 1 528 "int16" `520 
f B "pwm_set_duty" 1 528 "void(int16 duty)" `519 
v L "stream" 1 529 "int8" `522 
v L "duty" 1 529 "int16" `523 
f G "pwm_set_duty" 1 529 "void(int8 stream,int16 duty)" `521 
v L "percent" 1 530 "int16" `525 
f B "pwm_set_duty_percent" 1 530 "void(int16 percent)" `524 
v L "stream" 1 531 "int8" `527 
v L "percent" 1 531 "int16" `528 
f G "pwm_set_duty_percent" 1 531 "void(int8 stream,int16 percent)" `526 
v L "frequency" 1 532 "int32" `530 
f B "pwm_set_frequency" 1 532 "void(int32 frequency)" `529 
v L "stream" 1 533 "int8" `532 
v L "frequency" 1 533 "int32" `533 
f G "pwm_set_frequency" 1 533 "void(int8 stream,int32 frequency)" `531  "#use capture() Prototypes:"
f B "get_capture_time" 1 536 "int16()" `534 
v L "stream" 1 537 "int8" `536 
f G "get_capture_time" 1 537 "int16(int8 stream)" `535 
f B "get_capture_event" 1 538 "int8()" `537 
v L "stream" 1 539 "int8" `539 
f G "get_capture_event" 1 539 "int8(int8 stream)" `538  "Enviroment Prototypes:"
c L "get_capture_event" 1 3 2 "FUNCTION"
v L "address" 1 552 "int16" `541 
f B "goto_address" 1 552 "void(int16 address)" `540 
v L "label" 1 553 "int16" `543 
f B "label_address" 1 553 "int16(int16 label)" `542  "Program Memory Prototypes:"
v L "address" 1 556 "int16" `545 
v L "dataptr" 1 556 "*int8" `546 
v L "count" 1 556 "int16" `547 
f B "read_program_memory" 1 556 "void(int16 address,*int8 dataptr,int16 count)" `544 
v L "address" 1 557 "int16" `549 
f B "read_program_eeprom" 1 557 "int16(int16 address)" `548 
v L "address" 1 558 "int16" `551 
f B "erase_program_eeprom" 1 558 "void(int16 address)" `550 
v L "address" 1 559 "int16" `553 
v L "dataptr" 1 559 "*int8" `554 
v L "count" 1 559 "int16" `555 
f B "write_program_memory" 1 559 "void(int16 address,*int8 dataptr,int16 count)" `552 
v L "address" 1 560 "int16" `557 
v L "data" 1 560 "int16" `558 
f B "write_program_eeprom" 1 560 "void(int16 address,int16 data)" `556  "INT"
c L "write_program_eeprom" 1 3 4 "FUNCTION"
v L "interrupt" 1 567 "int32" `560 
f B "enable_interrupts" 1 567 "void(int32 interrupt)" `559 
v L "interrupt" 1 568 "int32" `562 
f B "disable_interrupts" 1 568 "void(int32 interrupt)" `561 
v L "interrupt" 1 569 "int32" `564 
f B "clear_interrupt" 1 569 "void(int32 interrupt)" `563 
v L "interrupt" 1 570 "int32" `566 
f B "interrupt_active" 1 570 "int8(int32 interrupt)" `565 
v L "interrupt" 1 571 "int32" `568 
f B "interrupt_enabled" 1 571 "int8(int32 interrupt)" `567 
v L "source" 1 572 "int8" `570 
v L "edge" 1 572 "int8" `571 
f B "ext_int_edge" 1 572 "void(int8 source,int8 edge)" `569 
v L "address" 1 573 "int16" `573 
f B "jump_to_irs" 1 573 "void(int16 address)" `572  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 575 "0x40"
d G "H_TO_L" 1 576 "0"
d G "GLOBAL" 1 578 "0x0BC0"
d G "PERIPH" 1 579 "0x0B40"
d G "INT_EXT_L2H" 1 580 "0x50000B10"
d G "INT_EXT_H2L" 1 581 "0x60000B10"
d G "INT_EXT" 1 582 "0x300B10"
d G "INT_TIMER0" 1 583 "0x300B20"
d G "INT_TIMER1" 1 584 "0x309101"
d G "INT_TIMER2" 1 585 "0x309102"
d G "INT_SSP" 1 586 "0x309108"
d G "INT_TBE" 1 587 "0x309110"
d G "INT_RDA" 1 588 "0x309120"
d G "INT_TIMER1_GATE" 1 589 "0x309180"
d G "INT_BUSCOL" 1 590 "0x309208"
d G "INT_OSC_FAIL" 1 591 "0x309280"
d G "INT_RA" 1 592 "0x30FF0B08"
d G "INT_ACT" 1 593 "0x309202"
d G "INT_USB" 1 594 "0x309204"
d G "INT_RA0" 1 595 "0x30010B08"
d G "INT_RA0_L2H" 1 596 "0x10010B08"
d G "INT_RA0_H2L" 1 597 "0x20010B08"
d G "INT_RA1" 1 598 "0x30020B08"
d G "INT_RA1_L2H" 1 599 "0x10020B08"
d G "INT_RA1_H2L" 1 600 "0x20020B08"
d G "INT_RA3" 1 601 "0x30080B08"
d G "INT_RA3_L2H" 1 602 "0x10080B08"
d G "INT_RA3_H2L" 1 603 "0x20080B08"
d G "INT_RA4" 1 604 "0x30100B08"
d G "INT_RA4_L2H" 1 605 "0x10100B08"
d G "INT_RA4_H2L" 1 606 "0x20100B08"
d G "INT_RA5" 1 607 "0x30200B08"
d G "INT_RA5_L2H" 1 608 "0x10200B08"
d G "INT_RA5_H2L" 1 609 "0x20200B08"
V G "num" 0 7 "int8" `580 
V G "n" 0 7 "int8" `581 
V G "estado" 0 7 "int8" `582 
V G "i" 0 7 "int8" `583 
V G "begin" 0 7 "int8" `584 
V G "eject" 0 7 "int8" `585 
V G "p" 0 7 "int8" `586 
V G "t" 0 7 "int8" `587 
V G "casa" 0 7 "int8" `588 
V G "tiempo" 0 8 "int32" `589 
V G "pasos" 0 8 "int32" `590 
V G "buffer" 0 8 "int32" `591 
V G "j" 0 8 "int32" `592 
V G "array" 0 8 "int32[8]" `593 
V G "k" 0 8 "int32" `594 
V G "direccion" 0 8 "int32" `595 
F G "Parametros" 0 11 "void()" `596 
F G "stop" 0 29 "void()" `600 
F G "pulso" 0 46 "void()" `601 
F G "Home" 0 58 "void()" `602 
F G "intrr_i2c" 0 89 "void()" `603 
V L "incoming" 0 90 "int8" `604 
F G "MAIN" 0 129 "void()" `606 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_c" 1 0
F B "input_a" 0 0
F B "input_c" 0 0
F B "set_tris_a" 1 0
F B "set_tris_c" 1 0
F B "get_tris_a" 0 0
F B "get_tris_c" 0 0
F B "input_change_a" 0 0
F B "input_change_c" 0 0
F B "port_a_pullups" 1 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_timer_0" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_pwm1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_pwm2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_oscillator" 0 2
F B "setup_act" 0 1
F B "act_status" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "i2c_read" 0 2
F B "i2c_write" 1 2
F B "i2c_start" 0 2
F B "i2c_stop" 0 1
F B "i2c_isr_state" 0 1
F B "i2c_slaveaddr" 1 2
F B "i2c_poll" 0 1
F B "i2c_init" 1 2
